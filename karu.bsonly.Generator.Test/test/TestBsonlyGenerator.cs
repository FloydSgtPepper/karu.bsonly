using System.Diagnostics;
using System.Net.NetworkInformation;
using System.Runtime.Serialization;
using System.Text;
using Microsoft;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Text;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities;
using Mono.Cecil.Cil;
using karu.bsonly.Generator;
using karu.bsonly.Serialization.Interface;

namespace karu.bsonly.Generator.Test;

using VerifyGenerator = CSharpSourceGeneratorVerifier<Generator.BsonlyGenerator>;

[BsonlyGenerator]
partial class TestClass1
{
  [ApiElement(name: "foo", order: 2)]
  public string Foo = "bar";

  [ApiOrder(1)]
  private int privateLong = 19;

  [ApiIgnore]
  public long LongProperty = 42;

  [ApiElement("BigChar", order: 42)]
  [ApiOrder(19)]
  public char Character = 'a';

  [ApiElement(order: 42, name: "arg_order")]
  public string Char = "alpha";

  [ApiElement("LongAsInt")]
  [ApiOrder(0)]
  public int IntAsLong = 42;

  [ApiElement(name: "PPPP")]
  public ushort ShortProp = 6;

  public void Func()
  {
    int a = 1 + privateLong;
  }
}

[BsonlyGenerator]
partial class TestClass5
{
  [ApiElement("MyChar", order: 42)]
  public char Character = 'a';

  [ApiName("foo")]
  [ApiOrder(order: 42)]
  public int IntAsLong = 42;

  [ApiName(name: "barbar")]
  [ApiOrder(0)]
  public int AnotherIntAsLong = 42;
}

[TestClass]
public class TestSerializerGenerator
{
  // https://posts.specterops.io/dotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5

  // https://www.meziantou.net/testing-roslyn-incremental-source-generators.htm
  [TestMethod]
  public async Task TestSerializationGeneration()
  {
    var code = """
using karu.bsonly.Serialization;
using karu.bsonly.Generator.Interface;
using karu.bsonly.Generator;

namespace karu.bsonly.Serialization.Test;

[BsonlyGenerator]
partial class TestClassGenerated
{
  public long LongProperty = 0;

  public TestClassInnerGenerated InnerClass = new();
  public int IntProperty = 0;
}
""";

    const string expected = """
// <auto-generated/>
#nullable enable

namespace karu.bsonly.Serialization.Test
{
partial class TestClassGenerated : global::karu.bsonly.Serialization.Interface.ISerializable
{
  public void Serialize(global::karu.bsonly.Serialization.Interface.IBaseSerializer _generated_param_writer, global::karu.bsonly.Serialization.Interface.SerializationContext _generated_param_context)
  {
    _generated_param_writer.WriteLong("LongProperty"u8, this.LongProperty);
    global::karu.bsonly.Serialization.Serializer.Serialize(_generated_param_writer, "InnerClass"u8,  this.InnerClass);
    _generated_param_writer.WriteInt("IntProperty"u8, this.IntProperty);
  }
  
  public void Deserialize(global::karu.bsonly.Serialization.Interface.IDocumentDeserializer _generated_param_reader, global::karu.bsonly.Serialization.Interface.DeserializationContext _generated_param_context)
  {
    if (_generated_param_reader.HasEntry("LongProperty"u8, global::karu.bsonly.Serialization.Interface.BsonSerialization.BsonConstantsBSON_TYPE_INT64))
      this.LongProperty = _generated_param_reader.ReadLong(); // order: -1 type: "long"
    if (_generated_param_reader.HasEntry("InnerClass"u8, global::karu.bsonly.Serialization.Interface.BsonSerialization.BsonConstantsBSON_TYPE_DOCUMENT))
      global::karu.bsonly.Serialization.Serializer.Serialize(_generated_param_reader, "InnerClass"u8,  this.InnerClass);
    if (_generated_param_reader.HasEntry("IntProperty"u8, global::karu.bsonly.Serialization.Interface.BsonSerialization.BsonConstantsBSON_TYPE_INT32))
      this.IntProperty = _generated_param_reader.ReadInt(); // order: -1 type: "int"
  }
} // class
} // namespace
""";

    await new VerifyGenerator.Test
    {
      TestState =
            {
                Sources = { code },
                GeneratedSources =
                {
                    (typeof(Generator.BsonlyGenerator), "TestClassGenerated.g.cs", SourceText.From(expected, Encoding.UTF8))
                    // ("TestInput.g.cs", expected),
                }
            },
    }.RunAsync();
  }
}


#region Copyright notice and license

// Copyright 2025 The bsonly Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#endregion